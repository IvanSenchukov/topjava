Index: src/main/java/ru/javawebinar/topjava/AuthorizedUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/AuthorizedUser.java	(date 1554823341986)
+++ src/main/java/ru/javawebinar/topjava/AuthorizedUser.java	(date 1554823341986)
@@ -0,0 +1,33 @@
+package ru.javawebinar.topjava;
+
+import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.to.UserTo;
+import ru.javawebinar.topjava.util.UserUtil;
+
+public class AuthorizedUser extends org.springframework.security.core.userdetails.User {
+    private static final long serialVersionUID = 1L;
+
+    private UserTo userTo;
+
+    public AuthorizedUser(User user) {
+        super(user.getEmail(), user.getPassword(), user.isEnabled(), true, true, true, user.getRoles());
+        this.userTo = UserUtil.asTo(user);
+    }
+
+    public int getId() {
+        return userTo.getId();
+    }
+
+    public void update(UserTo newTo) {
+        userTo = newTo;
+    }
+
+    public UserTo getUserTo() {
+        return userTo;
+    }
+
+    @Override
+    public String toString() {
+        return userTo.toString();
+    }
+}
\ No newline at end of file
Index: src/main/resources/spring/spring-security.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/spring/spring-security.xml	(date 1554823324000)
+++ src/main/resources/spring/spring-security.xml	(date 1554823341994)
@@ -30,12 +30,19 @@
     </http>
 
     <authentication-manager>
-        <authentication-provider>
+        <authentication-provider user-service-ref="userService">
             <password-encoder ref="noopEncoder"/>
+<!--
+            <jdbc-user-service data-source-ref="dataSource"
+                               users-by-username-query="SELECT email, password, enabled FROM users WHERE email = ?"
+                               authorities-by-username-query="
+                                                       SELECT u.email, r.role FROM users u, user_roles r WHERE u.id = r.user_id AND u.email = ?"
+            />
             <user-service>
                 <user name="user@yandex.ru" password="password" authorities="ROLE_USER"/>
                 <user name="admin@gmail.com" password="admin" authorities="ROLE_ADMIN"/>
             </user-service>
+-->
         </authentication-provider>
     </authentication-manager>
 </beans:beans>
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/model/Role.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/model/Role.java	(date 1554823324000)
+++ src/main/java/ru/javawebinar/topjava/model/Role.java	(date 1554823341938)
@@ -1,6 +1,13 @@
 package ru.javawebinar.topjava.model;
 
-public enum Role {
+import org.springframework.security.core.GrantedAuthority;
+
+public enum Role implements GrantedAuthority {
     ROLE_USER,
-    ROLE_ADMIN
+    ROLE_ADMIN;
+
+    @Override
+    public String getAuthority() {
+        return name();
+    }
 }
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java	(date 1554823324000)
+++ src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java	(date 1554823342000)
@@ -34,7 +34,7 @@
 
     @Test
     void testUpdate() throws Exception {
-        UserTo updatedTo = new UserTo(null, "newName", "newemail@ya.ru", "newPassword");
+        UserTo updatedTo = new UserTo(null, "newName", "newemail@ya.ru", "newPassword", 1500);
 
         mockMvc.perform(put(REST_URL).contentType(MediaType.APPLICATION_JSON)
                 .content(JsonUtil.writeValue(updatedTo)))
Index: src/main/java/ru/javawebinar/topjava/to/UserTo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/to/UserTo.java	(date 1554823324000)
+++ src/main/java/ru/javawebinar/topjava/to/UserTo.java	(date 1554823341964)
@@ -1,10 +1,16 @@
 package ru.javawebinar.topjava.to;
 
+import org.hibernate.validator.constraints.Range;
+import ru.javawebinar.topjava.util.UserUtil;
+
 import javax.validation.constraints.Email;
 import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotNull;
 import javax.validation.constraints.Size;
+import java.io.Serializable;
 
-public class UserTo extends BaseTo {
+public class UserTo extends BaseTo implements Serializable {
+    private static final long serialVersionUID = 1L;
 
     @NotBlank
     @Size(min = 2, max = 100)
@@ -18,14 +24,19 @@
     @Size(min = 5, max = 32, message = "length must between 5 and 32 characters")
     private String password;
 
+    @Range(min = 10, max = 10000)
+    @NotNull
+    private Integer caloriesPerDay = UserUtil.DEFAULT_CALORIES_PER_DAY;
+
     public UserTo() {
     }
 
-    public UserTo(Integer id, String name, String email, String password) {
+    public UserTo(Integer id, String name, String email, String password, int caloriesPerDay) {
         super(id);
         this.name = name;
         this.email = email;
         this.password = password;
+        this.caloriesPerDay = caloriesPerDay;
     }
 
     public String getPassword() {
@@ -52,12 +63,17 @@
         this.email = email;
     }
 
+    public Integer getCaloriesPerDay() {
+        return caloriesPerDay;
+    }
+
     @Override
     public String toString() {
         return "UserTo{" +
                 "id=" + id +
                 ", name='" + name + '\'' +
                 ", email='" + email + '\'' +
+                ", caloriesPerDay='" + caloriesPerDay + '\'' +
                 '}';
     }
 }
Index: src/main/java/ru/javawebinar/topjava/util/UserUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/UserUtil.java	(date 1554823324000)
+++ src/main/java/ru/javawebinar/topjava/util/UserUtil.java	(date 1554823341972)
@@ -12,6 +12,10 @@
         return new User(null, newUser.getName(), newUser.getEmail().toLowerCase(), newUser.getPassword(), Role.ROLE_USER);
     }
 
+    public static UserTo asTo(User user) {
+        return new UserTo(user.getId(), user.getName(), user.getEmail(), user.getPassword(), user.getCaloriesPerDay());
+    }
+
     public static User updateFromTo(User user, UserTo userTo) {
         user.setName(userTo.getName());
         user.setEmail(userTo.getEmail().toLowerCase());
Index: src/main/java/ru/javawebinar/topjava/web/SecurityUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/SecurityUtil.java	(date 1554823324000)
+++ src/main/java/ru/javawebinar/topjava/web/SecurityUtil.java	(date 1554823916335)
@@ -1,25 +1,36 @@
 package ru.javawebinar.topjava.web;
 
-import ru.javawebinar.topjava.model.AbstractBaseEntity;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+import ru.javawebinar.topjava.AuthorizedUser;
 
-import static ru.javawebinar.topjava.util.UserUtil.DEFAULT_CALORIES_PER_DAY;
+import static java.util.Objects.requireNonNull;
 
 public class SecurityUtil {
 
-    private static int id = AbstractBaseEntity.START_SEQ;
-
     private SecurityUtil() {
     }
 
+    public static AuthorizedUser safeGet() {
+        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+        if (auth == null) {
+            return null;
+        }
+        Object principal = auth.getPrincipal();
+        return (principal instanceof AuthorizedUser) ? (AuthorizedUser) principal : null;
+    }
+
+    public static AuthorizedUser get() {
+        AuthorizedUser user = safeGet();
+        requireNonNull(user, "No authorized user found");
+        return user;
+    }
+
     public static int authUserId() {
-        return id;
-    }
-
-    public static void setAuthUserId(int id) {
-        SecurityUtil.id = id;
+        return get().getUserTo().getId();
     }
 
     public static int authUserCaloriesPerDay() {
-        return DEFAULT_CALORIES_PER_DAY;
+        return get().getUserTo().getCaloriesPerDay();
     }
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(date 1554823324000)
+++ src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(date 1554823341953)
@@ -3,9 +3,12 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.cache.annotation.CacheEvict;
 import org.springframework.cache.annotation.Cacheable;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.util.Assert;
+import ru.javawebinar.topjava.AuthorizedUser;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.repository.UserRepository;
 import ru.javawebinar.topjava.to.UserTo;
@@ -17,8 +20,8 @@
 import static ru.javawebinar.topjava.util.ValidationUtil.checkNotFound;
 import static ru.javawebinar.topjava.util.ValidationUtil.checkNotFoundWithId;
 
-@Service
-public class UserServiceImpl implements UserService {
+@Service("userService")
+public class UserServiceImpl implements UserService, UserDetailsService {
 
     private final UserRepository repository;
 
@@ -82,6 +85,15 @@
         repository.save(user);  // !! need only for JDBC implementation
     }
 
+    @Override
+    public AuthorizedUser loadUserByUsername(String email) throws UsernameNotFoundException {
+        User user = repository.getByEmail(email.toLowerCase());
+        if (user == null) {
+            throw new UsernameNotFoundException("User " + email + " is not found");
+        }
+        return new AuthorizedUser(user);
+    }
+
     @Override
     public User getWithMeals(int id) {
         return checkNotFoundWithId(repository.getWithMeals(id), id);
